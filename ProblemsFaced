# Fixing YOLOv8 ONNX Inference in Streamlit Without PyTorch

Overview:
I faced issues while deploying a YOLOv8 ONNX model in a Streamlit app for mask and hairnet detection. Although the model worked locally using the Ultralytics YOLO API, the deployment using ONNXRuntime in Streamlit produced incorrect bounding boxes, duplicated detections, and dependency issues.

Problems Encountered:
1. **Incorrect and duplicated bounding boxes**:
   - Bounding boxes were stacked on top of each other or offset from the true object locations.
   - This was due to poor handling of postprocessing and bounding box scaling.

2. **Dependency failure**:
   - We initially used `torchvision.ops.nms`, which relies on PyTorch.
   - Streamlit Cloud doesn't support custom packages like PyTorch by default, causing a `ModuleNotFoundError`.

Solution:
1. **Removed Torch Dependencies**:
   - Deleted `torch` and `torchvision` imports.
   - Replaced `torchvision.ops.nms()` with a pure NumPy implementation of Non-Maximum Suppression (NMS).

2. **Corrected Bounding Box Handling**:
   - Added a helper function `xywh2xyxy()` to convert center-based YOLO box format to corner-based.
   - Properly scaled coordinates back to original image dimensions after resizing during preprocessing.
   - Implemented a clean and reliable NumPy-based `non_max_suppression()` function.

3. **Streamlined Postprocessing**:
   - The `postprocess()` function now handles:
     - Conversion of model output.
     - Confidence thresholding.
     - NMS.
     - Bounding box scaling.

Outcome:
The Streamlit app now works reliably with:
- Accurate detection of bounding boxes.
- No dependency on PyTorch.
- Efficient performance using ONNXRuntime and NumPy.

Recommendation:
For deployment in cloud environments like Streamlit Cloud, always avoid heavyweight dependencies unless explicitly supported. When using ONNX, rely on NumPy for postprocessing and remove torch-based utilities unless necessary.

Author: Abdalrahman Hazem
